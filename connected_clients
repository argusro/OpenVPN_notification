#! /usr/bin/env python
#=============================================================================================================
#
#   OpenVPN New Client Notification Script
#
#   This script will act on information found on OpenVPN status log file, to call IFTTT thru Webhooks
#   It will keep an output file as a database of connected clients, and has a log output for new clients
#   On IFTTT create a recipe from webhoots to notification, get the maker Key and recipe name.
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   version 2 as published by the Free Software Foundation.
#
#   Dependencies: 	ipapi - geolocation, carefull that they have a limit for free use
#			ifttt_webhook - calls for ifttt
#                       tested on python 3.6
#
#   Use: manual ./connected_clients
#   Create a cron entry to call script every minute for example.
#
#   Version: 1.0 - 08/2020
#   Autor: ArgusR <@argusro>
#
#===========================================================================================================

import re, os, sys
import ipapi
from datetime import datetime
from ifttt_webhook import IftttWebhook

START_PATTERN = '^Virtual'						# openvpn log has lots of text, just is to filter just client information
END_PATTERN = '^GLOBAL'
VPN_FILE = '/etc/openvpn/openvpn-status.log'				# actual openvpn status log
OUTPUT_FILE = '/tmp/active_clients'					# output file
TEMP_FILE = '/tmp/.temp_file'						# temp file to hold new client list
LOG_FILE = '/tmp/.ifttt_call_log'					# log output of new client calls
IFTTT_KEY = 'xxxxxxxxxxxxxxxxxxxxxxx'					# add here your IFTTT Maker Key
IFTTT_EVENT = 'xxxxxxx'							# add here your IFTTT Event name

ifttt = IftttWebhook(IFTTT_KEY)
now = datetime.now()							# get current time for log
current_time = now.strftime("%y-%m-%d %H:%M:%S")

use_geo = "no"								# flag to disable geolocation api call, set as "yes" to enable

with open(VPN_FILE) as file:						# start reading openvpn status file
    match = False
    city = "Location Disabled"
    for line in file:
        if re.match(START_PATTERN, line):				# if find the first pattern in the file, open temp file
            match = True
            tempfile = open(TEMP_FILE, 'w')
            continue
        elif re.match(END_PATTERN, line):				# if find closing pattern, override tempfile to output file
            match = False
            tempfile.close()
            os.rename(TEMP_FILE,OUTPUT_FILE)
        elif match:							# for each line with client information
            split_line = line.split(",",3)[0:3]				# put all itens from the client in a list
            new_line = [i.split(':', 1)[0] for i in split_line]		# from the element ip remove the :port information
            ext_ip = new_line[2]					# put the ip information in a variable for later use
            if os.path.exists(OUTPUT_FILE):				# check if the output file exist
               with open(OUTPUT_FILE) as f:				# open output file to read
                    if new_line[0] in f.read():				# check if the client ip from this line can be found on the file, if yes:
                        with open(OUTPUT_FILE) as f_read:		# client was already connected, so read the file again
                            for old_line in f_read:			# grab the line from file with this client information
                                if new_line[0] in old_line:
                                    tempfile.write(old_line)		# put already connected client information on temp file
                                    tempfile.write('\n')
                    else:						# if this new client wasn't already connected
                        logevent=open(LOG_FILE, 'a')			# open log file to append information
                        try:
                            if use_geo == "yes":					# if flag to check geolocation is set
                                city = ipapi.location(ext_ip,'','city')			# check city, country, latitud and longitude
                                country = ipapi.location(ext_ip,'','country_name')	# you can see other options on ipapi options
                                lat = ipapi.location(ext_ip,'','latitude')
                                lon = ipapi.location(ext_ip,'','longitude')
                                new_line.extend((country,city,lat,lon))			# add this new metadata to the list
                        except:
                            ipaip_error = current_time + " ---------- RateLimited reached \n"	# if you try to use ipapi but fail, save log information
                            logevent.write(ipaip_error)
                        ifttt.trigger(IFTTT_EVENT, value1=ext_ip, value2=new_line[1] + " | " + new_line[0], value3=city)	# call notification
                        call = current_time + " - called notification for " + new_line[0] + "\n"				# log call information
                        logevent.write(call)
                        logevent.close()				# close log file
                        tempfile.write(str(new_line))			# write this new client information to temp file
                        tempfile.write('\n')
